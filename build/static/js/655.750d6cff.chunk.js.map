{"version":3,"file":"static/js/655.750d6cff.chunk.js","mappings":"+hCACA,EAAgC,oCAAhC,EAA2E,2BAA3E,EAA6G,2BAA7G,EAAgJ,4B,UCqChJ,EA5BqB,WACnB,IAAMA,EAAeC,OAAOD,aACtBE,EAAkBC,EAAAA,SAAc,WACpC,IAAIC,EACJ,IACEA,EAAYC,KAAKC,MAAMN,EAAaO,QAAQ,aAC9C,CACA,MAAOC,GACLJ,EAAY,IACd,CAEA,OAjBa,SAACK,GAChB,IAAKA,KAAWC,EAAAA,EAAAA,IAASD,GAAS,OAAO,KACzC,IAAME,EAAOC,OAAOD,KAAKF,GACzB,OAAOI,EAAAA,OAAiB,SAAAC,GAAQ,OAAIH,EAAKI,SAASD,EAASE,KAAK,GAClE,CAaWC,CAASb,GACdA,EACAS,EAAAA,QAAkB,SAACK,EAAMC,GAAI,OAAMD,EAAKC,EAAKH,MAAQ,CAAC,EAAGE,CAAI,GAAG,CAAC,EACrE,GAAG,CAAClB,IAEJoB,EAAoCjB,EAAAA,SAAeD,GAAgBmB,GAAAC,EAAAA,EAAAA,GAAAF,EAAA,GAA3DhB,EAASiB,EAAA,GAAEE,EAAYF,EAAA,GAM/B,OAJAlB,EAAAA,WAAgB,WACdH,EAAawB,QAAQ,YAAanB,KAAKoB,UAAUrB,GACnD,GAAG,CAACA,IAEG,CACLmB,aAAAA,EACAnB,UAAAA,EAEJ,E,SCyBA,EArDqB,WACnB,IAAAsB,EAAoCC,IAA5BvB,EAASsB,EAATtB,UAAWmB,EAAYG,EAAZH,aAmBbK,EAAmB,SAACC,EAAOC,EAAQhB,EAAUiB,GAAY,OAC7DC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAEHC,GAAG,OACHC,KAAK,QACLC,UAAWC,EAAYC,SAAA,EACvBC,EAAAA,EAAAA,KAACN,EAAAA,EAAAA,OAAW,CAAAK,SAAExB,EAASE,QACvBuB,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,QAAQ,QAAOH,SACvBxB,EAAS4B,MAAMC,KAAI,SAACC,EAAMC,GAAC,OAzBX,SAACD,EAAMf,EAAOiB,EAAO9B,EAAMe,GAAY,OAC5DQ,EAAAA,EAAAA,KAAA,SAAmBH,UAAWC,EAAaC,UACzCN,EAAAA,EAAAA,MAACQ,EAAAA,EAAAA,KAAc,CACbO,OAAQD,EACRV,UAAWC,EACXI,QAAQ,OAAMH,SAAA,EACdC,EAAAA,EAAAA,KAACS,EAAAA,EAAAA,MAAU,CACTC,KAAK,WACLjC,KAAI,GAAAkC,OAAKlC,EAAI,KAAAkC,OAAIN,GACjBE,MAAOA,EACPK,QAASC,QAAQN,GACjBO,SAAUtB,KAEZQ,EAAAA,EAAAA,KAAA,QAAMe,MAAO,CAAEC,WAAY,OAAQjB,SAAEM,QAZ7Bf,EAcH,CAWH2B,CAAeZ,EAAMC,EAAGf,EAAOhB,EAASE,MAAM4B,GAAO9B,EAASE,KAAMe,EAAa,QAPhFF,EAUA,EAET,OAAKzB,GAEEmC,EAAAA,EAAAA,KAACkB,EAAAA,GAAM,CACZC,SAAU,SAACC,GAAI,OAAKpC,EAAaoC,EAAK,EACtCC,cAAexD,EAAUkC,SACxB,SAAAuB,GAAA,IAAGC,EAAUD,EAAVC,WAAY/B,EAAY8B,EAAZ9B,aAAcD,EAAM+B,EAAN/B,OAAM,OAClCS,EAAAA,EAAAA,KAACS,EAAAA,EAAI,CAACK,SAAUS,EAAY1B,UAAU,gBAAeE,UACnDC,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,CAAAzB,UACRC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAqBC,SAClCzB,EAAAA,KAAe,SAACC,EAAU+B,GAAC,OAC1BjB,EAAiBiB,EAAGf,EAAQhB,EAAUiB,EAAa,SAIpD,IAdY,IAiBzB,C","sources":["webpack://wc-app/./src/PackingGuide/PackingGuide.module.css?7ad9","PackingGuide/useChecklist.jsx","PackingGuide/PackingGuide.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"gridContainer\":\"PackingGuide_gridContainer__x2D6O\",\"card\":\"PackingGuide_card__zCHv3\",\"item\":\"PackingGuide_item__m0en0\",\"label\":\"PackingGuide_label__p0X7k\"};","import { isObject } from \"formik\";\r\nimport * as React from \"react\";\r\nimport categories from \"./categories.json\";\r\n\r\nconst validate = (cached) => {\r\n  if (!cached || !isObject(cached)) return null;\r\n  const keys = Object.keys(cached);\r\n  return categories.every(category => keys.includes(category.name))\r\n}\r\n\r\nconst useChecklist = () => {\r\n  const localStorage = window.localStorage;\r\n  const cachedChecklist = React.useMemo(() => {\r\n    let checklist\r\n    try {\r\n      checklist = JSON.parse(localStorage.getItem(\"checklist\"));\r\n    }\r\n    catch (e) {\r\n      checklist = null;\r\n    }\r\n\r\n    return validate(checklist) ?\r\n      checklist : \r\n      categories.reduce((prev, curr) => (prev[curr.name] = {}, prev), {});\r\n  }, [localStorage]);\r\n\r\n  const [ checklist, setChecklist ] = React.useState(cachedChecklist);\r\n\r\n  React.useEffect(() => {\r\n    localStorage.setItem(\"checklist\", JSON.stringify(checklist));\r\n  }, [checklist]);\r\n\r\n  return {\r\n    setChecklist,\r\n    checklist\r\n  }\r\n}\r\n\r\nexport default useChecklist;","import * as React from \"react\";\r\nimport { Form, Card, Container, ListGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\n\r\nimport categories from \"./categories.json\";\r\nimport styles from \"./PackingGuide.module.css\";\r\nimport useChecklist from \"./useChecklist\";\r\n\r\nconst PackingGuide = () => {\r\n  const { checklist, setChecklist } = useChecklist();\r\n  \r\n  const renderListItem = (item, index, value, name, handleChange) =>\r\n    <label key={index} className={styles.label}>\r\n      <ListGroup.Item\r\n        active={value}\r\n        className={styles.item}\r\n        variant=\"dark\">\r\n        <Form.Check\r\n          type=\"checkbox\"\r\n          name={`${name}.${item}`}\r\n          value={value}\r\n          checked={Boolean(value)}\r\n          onChange={handleChange}\r\n        />\r\n        <span style={{ marginLeft: \"8px\" }}>{item}</span>\r\n      </ListGroup.Item>\r\n    </label>;\r\n\r\n  const renderCategories = (index, values, category, handleChange) =>\r\n    <Card\r\n      key={index}\r\n      bg=\"dark\"\r\n      text=\"light\"\r\n      className={styles.card}>\r\n      <Card.Header>{category.name}</Card.Header>\r\n      <ListGroup variant=\"flush\">\r\n        {category.items.map((item, i) => \r\n          renderListItem(item, i, values[category.name][item], category.name, handleChange)\r\n        )}\r\n      </ListGroup>\r\n    </Card>\r\n\r\n  if (!checklist) return null;\r\n\r\n  return <Formik\r\n    onSubmit={(data) => setChecklist(data)}\r\n    initialValues={checklist}>\r\n    {({ submitForm, handleChange, values }) => \r\n      <Form onChange={submitForm} className=\"heroContainer\">\r\n        <Container>\r\n          <div className={styles.gridContainer}>\r\n            {categories.map((category, i) =>\r\n              renderCategories(i, values, category, handleChange)\r\n            )}\r\n          </div>\r\n        </Container>\r\n      </Form>\r\n    }\r\n  </Formik>\r\n};\r\n\r\nexport default PackingGuide;"],"names":["localStorage","window","cachedChecklist","React","checklist","JSON","parse","getItem","e","cached","isObject","keys","Object","categories","category","includes","name","validate","prev","curr","_React$useState","_React$useState2","_slicedToArray","setChecklist","setItem","stringify","_useChecklist","useChecklist","renderCategories","index","values","handleChange","_jsxs","Card","bg","text","className","styles","children","_jsx","ListGroup","variant","items","map","item","i","value","active","Form","type","concat","checked","Boolean","onChange","style","marginLeft","renderListItem","Formik","onSubmit","data","initialValues","_ref","submitForm","Container"],"sourceRoot":""}